# FROM postgres
FROM frodenas/postgresql
EXPOSE 5431
RUN apt update
RUN apt install nano
# RUN apt -y upgrade
# USER root
# RUN apt-get update \
#       && apt-get install -y sudo \
#       && rm -rf /var/lib/apt/lists/*
# RUN echo "root ALL=NOPASSWD: ALL" >> /etc/sudoers
RUN apt -y install software-properties-common
RUN apt-add-repository ppa:brightbox/ruby-ng
RUN apt update
RUN apt install -y ruby2.6
RUN apt install -y ruby2.6-dev
RUN mkdir -p /myapp
# COPY . /myapp
WORKDIR /myapp
ADD Gemfile /myapp/Gemfile
ADD Gemfile.lock /myapp/Gemfile.lock
RUN apt-get install -y zlib1g-dev
RUN apt-get install -y libsqlite3-dev
RUN apt-get install -y libpq-dev
RUN gem install bundler
# USER root
RUN bundle install
ADD . /myapp
EXPOSE 9294
# RUN pg_createcluster 12 main
# EXPOSE 9294
# EXPOSE 1841
# RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8

# # Add PostgreSQL's repository. It contains the most recent stable release
# #     of PostgreSQL, ``9.3``.
# RUN echo "deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main" > /etc/apt/sources.list.d/pgdg.list
# RUN apt install -y wget
# RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
# RUN sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" >> /etc/apt/sources.list.d/pgdg.list'
# Install ``python-software-properties``, ``software-properties-common`` and PostgreSQL 9.3
#  There are some warnings (in red) that show up during the build. You can hide
#  them by prefixing each apt-get statement with DEBIAN_FRONTEND=noninteractive
# USER postgres
# RUN chown postgres:postgres /etc/postgresql/11/main/
# RUN chmod -R 777 /etc/postgresql/11/main/
# RUN groupadd -r postgres && useradd -r -g postgres postgres
# RUN apt update
# RUN apt install -y postgresql postgresql-contrib
# CMD [ "apt", "update", "&&", "apt", "install", "-y", "postgresql", "postgresql-contrib"] 
# RUN 
# RUN service postgresql start
# RUN su - postgres
# Note: The official Debian and Ubuntu images automatically ``apt-get clean``
# after each ``apt-get``
# Run the rest of the commands as the ``postgres`` user created by the ``postgres-9.3`` package when it was ``apt-get installed``

# Create a PostgreSQL role named ``docker`` with ``docker`` as the password and
# then create a database `docker` owned by the ``docker`` role.
# Note: here we use ``&&\`` to run commands one after the other - the ``\``
#       allows the RUN command to span multiple lines.
# RUN    /etc/init.d/postgresql start

# Adjust PostgreSQL configuration so that remote connections to the
# database are possible.
# RUN echo "host all  all    0.0.0.0/0  md5" >> /etc/postgresql/11/main/pg_hba.conf

# And add ``listen_addresses`` to ``/etc/postgresql/9.3/main/postgresql.conf``
# RUN echo "listen_addresses='*'" >> /etc/postgresql/11/main/postgresql.conf

# Expose the PostgreSQL port
# USER postgres
# RUN service postgresql start
# RUN psql --command "CREATE USER root WITH SUPERUSER;"
# USER root
# RUN echo "host all  all    0.0.0.0/0  md5" >> /etc/postgresql/11/main/pg_hba.conf
# RUN echo "listen_addresses='*'" >> /etc/postgresql/11/main/postgresql.conf

# Add VOLUMEs to allow backup of config, logs and databases
# VOLUME  ["/etc/postgresql", "/var/log/postgresql", "/var/lib/postgresql"]

# Set the default command to run when starting the container
# CMD ["/usr/lib/postgresql/11/bin/postgres", "-D", "/var/lib/postgresql/11/main", "-c", "config_file=/etc/postgresql/11/main/postgresql.conf"]
# CMD [ "rake","db:reset" ] 
# ENTRYPOINT [ "rake", "app:dev" ]

# FROM ruby:2.6.6
# RUN apt update
# RUN apt-get install ruby-full
# RUN apt install -y ruby
# RUN apt install autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm3 libgdbm-dev
# RUN apt install -y git 
# RUN git clone https://github.com/rbenv/rbenv.git ~/.rbenv
# RUN echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
# RUN echo 'eval "$(rbenv init -)"' >> ~/.bashrc
# RUN source ~/.bashrc
# RUN rbenv install 2.6.6
# RUN apt-get update -qq && apt-get install -y build-essential libpq-dev nodejs
# CMD [ "service", "postgresql", "start" ]
# RUN chown postgres:postgres Gemfile.lock
# RUN chown postgres:postgres pid/
# RUN chmod -R 777 Gemfile.lock
# RUN chmod -R 777 pid/
# COPY init.sql /docker-entrypoint-initdb.d/
# COPY gem.sh /usr/local/bin/
# RUN ln -s /usr/local/bin/gem.sh / # backwards compat
# ENTRYPOINT ["gem.sh", "&&", "tail", "-f", "/dev/null"]
# CMD ["service", "postgresql", "start"]
ENTRYPOINT ["tail", "-f", "/dev/null"]